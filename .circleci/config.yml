version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        description:   Unique identifer
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> " 
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
        default: "$(CIRCLE_WORKFLOW_ID:0:7)"
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/6CWYp8y8NMLp4sQ3js279q/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build  
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend 
          command: |
            cd frontend
            npm install
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend 
          command: |
            cd backend
            npm install
            # npm install oauth-sign@0.12.2
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar & gzip
          command: |
            yum install -y gzip tar
      
      - run:
          name: get the old WorkflowID
          command: |
            OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo $OldWorkflowID > ~/OldWorkflowID.txt
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople 

      - run:
          name: Add ip of back-end to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters Name=tag:project,Values=udapeople \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - OldWorkflowID.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: sudo apt update -y
      - run: sudo apt upgrade -y
      - run:
          name: install awscli
          command: |
            sudo apt install awscli -y
            sudo apt install openssh-client -y
            sudo apt install git -y
      - run:
          name: install ansible
          command: |
            sudo apt install python3.8 -y
            sudo apt install python3-pip -y
            python3 -m pip install --upgrade pip
            python3 -m pip install ansible --user
      - add_ssh_keys:
          fingerprint: ["29:4c:a8:52:8e:3b:b3:17:cc:1a:cb:0d:32:05:5e:fb"]
      - attach_workspace:
          at: ~/    
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml 
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations >> migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/6CWYp8y8NMLp4sQ3js279q/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'              
            fi
      - destroy-environment  
      - revert-migrations
     
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip 
      - attach_workspace:
          at: ~/   
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_16.x | bash -
            yum install -y nodejs
            yum update -y python37
            curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
            python get-pip.py --user
            python -m pip install --user ansible

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment 
      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: sudo apt update -y
      - run: sudo apt upgrade -y
      - run:
          name: install awscli
          command: sudo apt install awscli -y
      - run:
          name: install ansible
          command: |
            sudo apt install python3.8 -y
            sudo apt install python3-pip -y
            python3 -m pip install --upgrade pip
            python3 -m pip install ansible --user
      - add_ssh_keys:
          fingerprint: ["29:4c:a8:52:8e:3b:b3:17:cc:1a:cb:0d:32:05:5e:fb"]
      - attach_workspace:
          at: ~/  
      - restore_cache:
          keys: [backend-build]     
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: sudo apt update -y
      - run: sudo apt upgrade -y
      - run:
          name: install awscli
          command: sudo apt install awscli -y
      
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters Name=tag:project,Values=udapeople \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
            exit 0
            else
              exit 1
            fi
      - destroy-environment  
      - revert-migrations

  cloudfront-update: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install gzip & tar
          command: |
            yum install -y gzip tar  
      - attach_workspace:
          at: ~/
      - run:
          name: Get the old workflowID
          command: |
            cat ~/OldWorkflowID.txt 
            OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo $OldWorkflowID

      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
              
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar & gzip
          command: |
            yum install -y gzip tar
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            cat ~/OldWorkflowID.txt
            OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo $OldWorkflowID
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
            echo  '-------------------cleanup Confirmed-------------------------'
              aws s3 rm "s3://${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo '....................Cannot Cleanup.........................'
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update: 
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
          
   