version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        description:   Unique identifer
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
    
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build  
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend 
          command: |
            cd frontend
            npm install
            npm install          
            # npm install oauth-sign@^0.12.2
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend 
          command: |
            cd backend
            npm install
            # npm install oauth-sign@0.12.2
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar & gzip
          command: |
            yum install -y gzip tar

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople 

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> ~/project/.circleci/ansible/roles/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:alpine3.16
    steps:
      - checkout
      # checkout code
      # Add ssh keys with fingerprint
      # attach workspace
      - add_ssh_keys:
          fingerprint: ["29:4c:a8:52:8e:3b:b3:17:cc:1a:cb:0d:32:05:5e:fb"]
      - attach_workspace:
          at: ~/    

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml 
      # Here's where you will add some code to rollback on failures

  run-migrations:
      docker:
        - image: cimg/node:18.4.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Run migrations
            command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
        - run:
            name: Send migration results to kvdb
            command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
              curl https://kvdb.io/6CWYp8y8NMLp4sQ3js279q/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
            
     # Here's where you will add some code to rollback on failure 
  deploy-frontend:
    docker:
      - image: almalinux:8.5
    steps:
      - checkout
      - run: yum install -y tar gzip 
      - attach_workspace:
          at: ~/   
      - run:
          name: Install dependencies
          command: |
            yum install -y nodejs
            yum install -y ansible

      #- run:
      #   name: Get backend url
      #   command: |
            # your code here
      #      export API_URL="http://${BACKEND_IP}:3030"
      #      echo "${API_URL}"
      #- run:
      #    name: Deploy frontend objects
      #    command: |
            # your code here
      

workflows:
  build backend & frontend:
    jobs:
      - build-frontend
      - build-backend
    #  - test-frontend:
    #      requires: [build-frontend]
    #  - test-backend:
    #      requires: [build-backend] 
    #  - scan-frontend:
    #      requires: [build-frontend]      
    #  - scan-backend:
    #      requires: [build-backend]
      - deploy-infrastructure
      - configure-infrastructure
      - run-migrations
      - deploy-frontend
